#include "nsISupports.idl"

interface nsIURL;
interface nsIPrefBranch;
interface nsILocalFile;
interface nsIHttpChannel;
interface mozIStorageConnection;

[scriptable, uuid(ef520a5c-0029-455a-9ef5-3c0e392799cd)]
interface nsIBbs2chService : nsISupports
{

	/**
	 * 2ch 型 BBS
	 */
	const unsigned long BOARD_TYPE_2CH = 0;

	/**
	 * 旧 2ch 型 BBS
	 */
	const unsigned long BOARD_TYPE_OLD2CH = 1;

	/**
	 * Be@2ch BBS
	 */
	const unsigned long BOARD_TYPE_BE2CH = 2;

	/**
	 * したらば JBBS
	 */
	const unsigned long BOARD_TYPE_JBBS = 3;

	/**
	 * まちBBS
	 */
	const unsigned long BOARD_TYPE_MACHI = 4;

	/**
	 * 通常ページ
	 */
	const unsigned long BOARD_TYPE_PAGE = 5;

	/**
	 * 2ch サーバに接続する際のユーザエージェント
	 */
	readonly attribute string userAgent;
	
	/**
	 * bbs2chreader で利用する RDF の名前空間
	 */
	readonly attribute string nameSpace;

	/**
	 * b2rServer の URL
	 */
	readonly attribute nsIURL serverURL;

	/**
	 * nsIPrefBranch
	 */
	readonly attribute nsIPrefBranch pref;

	/**
	 * デフォルト設定を返す nsIPrefBranch
	 */
	readonly attribute nsIPrefBranch prefDefault;


	/**
	 * 2ch ビューアにログインしているか
	 */
	readonly attribute boolean maruLogined;

	/**
	 * 2ch ビューアのセッションID
	 */
	readonly attribute string maruSessionID;

	/**
	 * 履歴データベース
	 */
	readonly attribute mozIStorageConnection historyDB;

	/**
	 * 文字コードを内部コードから Shift_JIS に変換
	 * @param aString 文字列
	 * @return 変換後の文字列
	 */
	string toSJIS(in AString aString);

	/**
	 * 文字コードを Shift_JIS から内部コードに変換
	 * @param aString 文字列
	 * @return 変換後の文字列
	 */
	AString fromSJIS(in string aString);

	/**
	 * 文字コードを内部コードから EUC-JP に変換
	 * @param aString 文字列
	 * @return 変換後の文字列
	 */
	string toEUC(in AString aString);

	/**
	 * 文字コードを EUC-JP から内部コードに変換
	 * @param aString 文字列
	 * @return 変換後の文字列
	 */
	AString fromEUC(in string aString);

	/**
	 * 文字コードを板のタイプから判別して内部コードに変換
	 * @param aString 文字列
	 * @param aBoardType BOARD_TYPE_XXX
	 * @return 変換後の文字列
	 */
	AString fromType(in string aString, in unsigned long aBoardType);

	/**
	 * 内部文字コードを板のタイプから判別して変換
	 * @param aString 文字列
	 * @param aBoardType BOARD_TYPE_XXX
	 * @return 変換後の文字列
	 */
	string toType(in AString aString, in unsigned long aBoardType);

	/**
	 * URL から板のタイプを返す
	 * @param aURLSpec スレッド、又は板の URL
	 * @return (BOARD_TYPE_XXX)
	 */	
	unsigned long getBoardType(in AUTF8String aURLSpec);

	/**
	 * スレッド URL から板の URL を返す
	 * @param aURLSpec スレッド URL
	 * @return 板の nsIURL
	 */	
	nsIURL getBoardURL(in AUTF8String aURLSpec);

	/**
	 * ブラウザで指定した URI を開く
	 * ブラウザウィンドウが無いときは新規ウィンドウで開く
	 * @param aURLSpec 開くページの URI
	 * @param aReferrer リファラ 送りたくないときは null
	 * @param aAddTab タブで開くかどうか
	 */
	void openURL(in AUTF8String aURLSpec, in AUTF8String aReferrer, in boolean aAddTab);

	/**
	 * 新しいブラウザウィンドウで指定した URI を開く
	 * aURISpec を指定しなかったときは about:blank
	 * @param aURLSpec 新しいウィンドウで開くページの URI
	 */
	void openNewWindow(in AUTF8String aURLSpec);

	/**
	 * データ保存ディレクトリを nsILocalFile で返す
	 * @return データ保存ディレクトリ
	 */
	nsILocalFile getDataDir();

	/**
	 * ログ保存ディレクトリ以下に URL のパスを追加して nsILocalFile を返す
	 * 		(e.g. http://www.example.com/hoge/hage.txt なら 
	 * 		  ログ保存ディレクトリ\www.example.com\hoge\hage.txt)
	 * @param aURLSpec ファイルの URL
	 * @return ログファイル
	 */
	nsILocalFile getLogFileAtURL(in AUTF8String aURLSpec);

	/**
	 * 指定したバージョン文字列と現在の Gecko のバージョンを比較する
	 * @param aVersion バージョン文字列(e.g. "1.8" "1.7.5")
	 * @return 指定したバージョンの方が新しければ 0より上、同じなら 0、古ければ 0より下
	 * @see nsIVersionComparator
	 */
	long geckoVersionCompare(in ACString aVersion);

	/**
	 * file/jar/chorme 内のテキストファイルを読み込んで内容を返す
	 * @param aURISpec ファイル URI
	 * @return ファイルの内容
	 */
	string readLocalURI(in AString aURISpec);

	/**
	 * ローカルテキストファイルを読み込んで内容を返す
	 * @param aFilePath ファイルパス
	 * @return ファイルの内容
	 */
	string readFile(in AString aFilePath);

	/**
	 * ローカルテキストファイルを読み込んで行ごとの配列を返す
	 * @param aFilePath ファイルパス
	 * @param aCount 行数
	 * @return ファイルの行配列
	 */
	void readFileLine(in AString aFilePath, out PRUint32 aCount, 
							[retval, array, size_is(aCount)] out string aLines);

	/**
	 * ローカルテキストファイルに文字列を書き込む
	 * @param aFilePath ファイルパス
	 * @param aContent 保存する文字列
	 * @param aAppend 真なら追加書き込み
	 * @return 成功したか真偽値
	 */
	boolean writeFile(in AString aFilePath, in string aContent, in boolean aAppend);

	/**
	 * プロクシなどの設定を施した nsIHttpChannel を返す
	 * @param aURL nsIHttpChannel を作成する URL 
	 */
	nsIHttpChannel getHttpChannel(in nsIURL aURL);


	/**
	 * 2ch ビューア認証を行う
	 */
	void maruAuth();

	boolean visitPage(in nsIURL aBoardURL, in AString aTitle, in unsigned long aType);
	void clearHistory();
};
