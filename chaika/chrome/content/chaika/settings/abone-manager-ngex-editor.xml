<?xml version="1.0"?>

<!-- See license.txt for terms of usage -->

<bindings id="chaikaNGExEditorBindings"
        xmlns="http://www.mozilla.org/xbl"
        xmlns:xbl="http://www.mozilla.org/xbl"
        xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="editor">
    <content>
        <xul:vbox flex="1" anonid="root">
            <xul:hbox align="center" pack="start">
                <xul:label value="ラベル:" />
                <xul:textbox class="label" flex="1" />
                <xul:checkbox label="自動" checked="true" anonid="auto-naming" class="auto-naming" />
            </xul:hbox>

            <xul:groupbox flex="1">
                <xul:caption label="条件" />

                <xul:hbox align="center" pack="start">
                    <xul:description value="次の" />

                    <xul:menulist class="match">
                        <xul:menupopup>
                            <xul:menuitem label="すべて" value="all" />
                            <xul:menuitem label="いずれか" value="any" />
                        </xul:menupopup>
                    </xul:menulist>

                    <xul:description value="のルールに一致:" />
                </xul:hbox>

                <xul:vbox class="container rules" flex="1" />
                <xul:vbox class="template">
                    <xul:hbox align="center" pack="start">
                        <xul:menulist class="rule-target">
                            <xul:menupopup>
                                <xul:menuitem label="名前" value="name" />
                                <xul:menuitem label="メール" value="mail" />
                                <xul:menuitem label="日付" value="date" />
                                <xul:menuitem label="発信元" value="ip" />
                                <xul:menuitem label="ホスト" value="host" />
                                <xul:menuitem label="ID" value="id" />
                                <xul:menuitem label="BeID" value="be" />
                                <xul:menuitem label="Be基礎番号" value="baseBe" />
                                <xul:menuitem label="本文" value="msg" />
                                <xul:menuitem label="スレタイ" value="title" />
                                <xul:menuitem label="板URL" value="board_url" />
                                <xul:menuitem label="スレURL" value="thread_url" />
                            </xul:menupopup>
                        </xul:menulist>

                        <xul:label value="が" />

                        <xul:textbox class="rule-query" />

                        <xul:menulist class="rule-condition">
                            <xul:menupopup>
                                <xul:menuitem label="を含む" value="contains" />
                                <xul:menuitem label="を含まない" value="notContain" />
                                <xul:menuitem label="と一致する" value="equals" />
                                <xul:menuitem label="と一致しない" value="notEqual" />
                                <xul:menuitem label="で始まる" value="startsWith" />
                                <xul:menuitem label="で終わる" value="endsWith" />
                            </xul:menupopup>
                        </xul:menulist>

                        <xul:checkbox label="正規表現" class="rule-regexp" />
                        <xul:checkbox label="Aa" class="rule-case-sensitive" checked="true" />

                        <xul:spacer flex="1" />

                        <xul:button label="-" anonid="rule-button-remove" />
                        <xul:button label="+" anonid="rule-button-add" />
                    </xul:hbox>
                </xul:vbox>
            </xul:groupbox>

            <xul:groupbox>
                <xul:caption label="オプション" />

                <xul:hbox align="center" pack="start">
                    <xul:label value="対象:" />
                    <xul:radiogroup class="target">
                        <xul:hbox>
                            <xul:radio label="レス" value="post" />
                            <xul:radio label="スレッド" value="thread" />
                        </xul:hbox>
                    </xul:radiogroup>
                </xul:hbox>

                <xul:hbox align="center" pack="start">
                    <xul:label value="透明あぼーん:" />
                    <xul:radiogroup class="hide-abone">
                        <xul:hbox>
                            <xul:radio label="デフォルトの設定に従う" value="undefined" selected="true" />
                            <xul:radio label="する" value="true" />
                            <xul:radio label="しない" value="false" />
                        </xul:hbox>
                    </xul:radiogroup>
                </xul:hbox>

                <xul:hbox align="center" pack="start">
                    <xul:label value="連鎖あぼーん:" />
                    <xul:radiogroup class="chain-abone">
                        <xul:hbox>
                            <xul:radio label="デフォルトの設定に従う" value="undefined" selected="true" />
                            <xul:radio label="する" value="true" />
                            <xul:radio label="しない" value="false" />
                        </xul:hbox>
                    </xul:radiogroup>
                </xul:hbox>

                <xul:hbox align="center" pack="start">
                    <xul:checkbox label="有効期限をつける: " class="set-expire" />
                    <xul:datepicker class="expire-date" type="popup" />
                    <xul:timepicker class="expire-time" hideseconds="true" />
                </xul:hbox>

                <xul:checkbox label="ヒットしたレスのIDを自動的にNGIDに追加する" class="autoNGID" />
                <xul:checkbox label="あぼーんせずにハイライトする" class="highlight" />
            </xul:groupbox>
        </xul:vbox>
    </content>

    <resources>
        <stylesheet src="chrome://chaika/skin/settings/abone-manager.css"/>
    </resources>

    <handlers>
        <handler event="command" action="this.handleEvent(event)"/>
        <handler event="change" action="this.handleEvent(event)"/>
    </handlers>

    <implementation>
        <constructor><![CDATA[
            Components.utils.import("resource://chaika-modules/ChaikaCore.js", this);

            this._root = document.getAnonymousElementByAttribute(this, "anonid", "root");
            this._labelbox = this._root.querySelector('.label');

            this.insertRule();
            this.setAutoNaming(true);

            setTimeout(() => {
                let now = new Date();
                this._populateExpire(new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1));
            }, 0);
        ]]></constructor>


        <method name="handleEvent">
            <parameter name="aEvent"/>
            <body><![CDATA[
                switch(aEvent.type){
                    case 'command':
                        switch(aEvent.originalTarget.getAttribute('anonid')){
                            case 'auto-naming':
                                this.toggleAutoNaming();
                                break;

                            case 'rule-button-add':
                                this.insertRule();
                                break;

                            case 'rule-button-remove':
                                this.removeRule(aEvent);
                                break;
                        }
                        break;

                    case 'change':
                        break;

                    default:
                        return;
                }

                if(this._enableAutoNaming){
                    this.setLabel();
                }
            ]]></body>
        </method>

        <method name="adjustWindowSize">
            <body><![CDATA[
                let rules = this._root.querySelector('.rules');

                //ディスプレイ高さの7.5割以上の高さになったら、
                //そこでウィンドウサイズを大きくするのはやめて、
                //かわりにルール表示部にスクロールバーを表示する
                if(window.outerHeight > window.screen.availHeight * 0.75){
                    window.resizeTo(window.outerWidth, window.screen.availHeight * 0.75);

                    if(!rules.classList.contains('fixed-height')){
                        rules.classList.add('fixed-height');
                        rules.style.height = Math.floor(rules.clientHeight) + 'px';
                    }
                }


                //ルール表示部の下部にまだ余裕がある場合には、
                //ルール表示部の固定高さ表示を解除する
                let lastRule = rules.querySelector('.rule:last-child');
                let rulesBottomMargin = rules.getBoundingClientRect().bottom -
                                        lastRule.getBoundingClientRect().bottom;

                if(rulesBottomMargin > 0){
                    rules.classList.remove('fixed-height');
                    rules.style.height = 'auto';
                }


                //条件を削除するなどして content のサイズが小さくなった場合に
                //ウィンドウ下部の空白部分が広がってしまう問題に対処する
                let windowBottomMargin = document.documentElement.getBoundingClientRect().bottom -
                                         this.getBoundingClientRect().bottom;

                if(windowBottomMargin > 0){
                    window.resizeBy(0, -windowBottomMargin);
                }


                //条件を追加したときにウィンドウサイズが広がらず、
                //下部が見切れてしまう問題に対処する
                //ウィンドウの再描画がうまく行われないことが原因？
                window.resizeBy(0, 0);
            ]]></body>
        </method>

        <method name="insertRule">
            <parameter name=""/>
            <body><![CDATA[
                let template = this._root.querySelector('.template');
                let newRule = template.cloneNode(true);

                newRule.classList.remove('template');
                newRule.classList.add('rule');

                this._root.querySelector('.rules').appendChild(newRule);

                this.adjustWindowSize();

                return newRule;
            ]]></body>
        </method>

        <method name="removeRule">
            <parameter name="aEvent"/>
            <body><![CDATA[
                let rule = aEvent.originalTarget.parentNode.parentNode;
                let rules = rule.parentNode;

                if(rules.childNodes.length > 1){
                    rule.parentNode.removeChild(rule);
                }

                this.adjustWindowSize();
            ]]></body>
        </method>

        <method name="clearRules">
            <body><![CDATA[
                let rules = this._root.querySelector('.rules');

                while(rules.childNodes.length > 0){
                    rules.removeChild(rules.firstChild);
                }
            ]]></body>
        </method>

        <method name="toggleAutoNaming">
            <body><![CDATA[
                let checkbox = this._root.querySelector('.auto-naming');

                this._enableAutoNaming =
                this._labelbox.disabled = checkbox.checked;
            ]]></body>
        </method>

        <method name="setAutoNaming">
            <parameter name="enable"/>
            <body><![CDATA[
                let checkbox = this._root.querySelector('.auto-naming');

                checkbox.checked =
                this._enableAutoNaming =
                this._labelbox.disabled = enable;
            ]]></body>
        </method>

        <method name="setLabel">
            <body><![CDATA[
                this._labelbox.value = this.getLabelText();
            ]]></body>
        </method>

        <method name="getLabelText">
            <parameter name=""/>
            <body><![CDATA[
                let rules = this._root.querySelectorAll('.rule');

                if(!rules.length) return '';

                let rulesText = Array.slice(rules).map((rule) => {
                    let target = rule.querySelector('.rule-target').selectedItem.label;
                    let query = rule.querySelector('.rule-query').value;
                    let condition = rule.querySelector('.rule-condition').selectedItem.label;

                    return target + 'が' + query + condition;
                });

                let match = this._root.querySelector('.match').selectedItem.label;
                let target = this._root.querySelector('.target').selectedItem.label;

                return rulesText.join(', ') + ' の' + match + 'に一致する' + target;
            ]]></body>
        </method>

        <method name="getNgData">
            <body><![CDATA[
                // eval 関数の代替
                function _eval(str){
                    switch(str){
                        case 'true':
                            return true;

                        case 'false':
                            return false;

                        case 'undefined':
                            return void 0;
                    }
                }


                let ngData = {};

                ngData.title = this._labelbox.value;
                ngData.match = this._root.querySelector('.match').value;
                ngData.target = this._root.querySelector('.target').value;
                ngData.autoNGID = this._root.querySelector('.autoNGID').checked;
                ngData.highlight = this._root.querySelector('.highlight').checked;

                ngData.hide = _eval(this._root.querySelector('.hide-abone').value);
                ngData.chain = _eval(this._root.querySelector('.chain-abone').value);

                if(this._root.querySelector('.set-expire').checked){
                    let datepicker = this._root.querySelector('.expire-date');
                    let timepicker = this._root.querySelector('.expire-time');
                    let expire = new Date(datepicker.year, datepicker.month, datepicker.date,
                                          timepicker.hour, timepicker.minute, 0, 0);

                    ngData.expire = expire.getTime();
                }

                let rules = this._root.querySelectorAll('.rule');

                ngData.rules = Array.slice(rules).map((rule) => {
                    return {
                        target: rule.querySelector('.rule-target').value,
                        query: rule.querySelector('.rule-query').value,
                        condition: rule.querySelector('.rule-condition').value,
                        regexp: rule.querySelector('.rule-regexp').checked,
                        ignoreCase: ! rule.querySelector('.rule-case-sensitive').checked
                    };
                });


                return ngData;
            ]]></body>
        </method>

        <method name="populateData">
            <parameter name="ngData"/>
            <body><![CDATA[
                this._labelbox.value = ngData.title || '';
                this._root.querySelector('.match').value = ngData.match;
                this._root.querySelector('.target').value = ngData.target;
                this._root.querySelector('.autoNGID').checked = !!ngData.autoNGID;
                this._root.querySelector('.highlight').checked = !!ngData.highlight;

                this._root.querySelector('.hide-abone').value = ngData.hide + '';
                this._root.querySelector('.chain-abone').value = ngData.chain + '';

                let now = new Date();
                let expire = ngData.expire ? new Date(ngData.expire) :
                                             new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);

                this._root.querySelector('.set-expire').checked = !!ngData.expire;
                this._populateExpire(expire);


                this.clearRules();

                ngData.rules.forEach((rule) => {
                    let node = this.insertRule();

                    node.querySelector('.rule-target').value = rule.target;
                    node.querySelector('.rule-query').value = rule.query;
                    node.querySelector('.rule-condition').value = rule.condition;
                    node.querySelector('.rule-regexp').checked = !!rule.regexp;
                    node.querySelector('.rule-case-sensitive').checked = ! rule.ignoreCase;
                });


                //タイトルが設定されていないか、
                //自動ネーミングと設定されているラベルが一致したら
                //自動ネーミングが有効だと判断する
                if(!ngData.title || ngData.title === this.getLabelText()){
                    this.setAutoNaming(true);
                }else{
                    this.setAutoNaming(false);
                }

                //もし有効ならラベルをセットする
                if(this._enableAutoNaming){
                    this.setLabel();
                }
            ]]></body>
        </method>

        <method name="_populateExpire">
            <parameter name="expire" />
            <body><![CDATA[
                let datepicker = this._root.querySelector('.expire-date');
                let timepicker = this._root.querySelector('.expire-time');

                datepicker.year = expire.getFullYear();
                datepicker.month = expire.getMonth();
                datepicker.date = expire.getDate();
                timepicker.hour = expire.getHours();
                timepicker.minute = expire.getMinutes();
            ]]></body>
        </method>

    </implementation>
</binding>

</bindings>
