<?xml version="1.0"?>

<bindings id="threadToolbarButtonBindings"
		xmlns="http://www.mozilla.org/xbl"
		xmlns:xbl="http://www.mozilla.org/xbl"
		xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<binding id="threadToolbarButton">
	<content>
		<xul:toolbarbutton label="chaika" class="toolbarbutton-1 thread-toolbarbutton" type="menu">
			<xul:menupopup anonid="menupopup" position="after_end">
				<xul:menuitem anonid="goToBoard-menu" label="スレッド一覧を開く"/>
				<xul:menuitem anonid="write-menu" label="このスレッドに書き込む"/>
				<xul:menuitem anonid="deleteLog-menu" label="このスレッドのログを削除"/>
				<xul:menuseparator/>
				<xul:menuitem anonid="viewChange-all-menu" label="すべてのレスを表示"/>
				<xul:menuitem anonid="viewChange-l50-menu" label="新着50件を表示"/>
				<xul:menuitem anonid="viewBroser-menu" label="ブラウザで開く"/>
				<xul:menuseparator/>
				<xul:menuitem anonid="openAboneManager-menu" label="あぼーんマネージャ"/>
			</xul:menupopup>
		</xul:toolbarbutton>
	</content>

	<resources>
		<stylesheet src="chrome://chaika/skin/browser/thread-toolbarbutton.css"/>
	</resources>

	<implementation>
		<constructor><![CDATA[
			Components.utils.import("resource://chaika-modules/ChaikaCore.js", this);
			Components.utils.import("resource://chaika-modules/ChaikaThread.js", this);
		]]></constructor>


		<method name ="showCheck">
			<body><![CDATA[
				this.hidden = (this._getCurrentThreadURL() === null);
			]]></body>
		</method>


		<method name ="_getCurrentThreadURL">
			<body><![CDATA[
				var currentURI = null;
				try{
					currentURI = getBrowser().currentURI.QueryInterface(Ci.nsIURL);
				}catch(ex){
					return null;
				}
				if(!(currentURI.host === "localhost" || currentURI.host === "127.0.0.1")) return null;
				if(currentURI.path.substring(0, 8) !== "/thread/") return null;


				var threadURL = null;
				try{
					 threadURL = Services.io.newURI(currentURI.path.substring(8), null, null)
							 .QueryInterface(Ci.nsIURL);					
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
				}
				
				return threadURL;
			]]></body>
		</method>


		<method name ="_doCommand">
			<parameter name="aEvent"/>
			<parameter name="aMiddleClicked"/>
			
			<body><![CDATA[
				var menupopup = document.getAnonymousElementByAttribute(this, "anonid", "menupopup");
				function hidePopupMenu(){
					if(aMiddleClicked){
						menupopup.hidePopup();
					}
				}

				var targetElement = aEvent.originalTarget;
				var anonymousID = targetElement.getAttribute("anonid");
				
				switch(anonymousID){
					case "goToBoard-menu":
						this._goToBoard(aMiddleClicked);
						hidePopupMenu();
						break;

					case "write-menu":
						if(!aMiddleClicked) this._write();
						break;

					case "deleteLog-menu":
						if(!aMiddleClicked) this._deleteLog();
						break;

					case "viewChange-all-menu":
						this._viewChange("./", aMiddleClicked);
						hidePopupMenu();
						break;

					case "viewChange-l50-menu":
						this._viewChange("./l50", aMiddleClicked);
						hidePopupMenu();
						break;

					case "viewBroser-menu":
						this._viewBrowser(aMiddleClicked);
						hidePopupMenu();
						break;

					case "openAboneManager-menu":
						if(!aMiddleClicked) this._openAboneManager();
						break;
				}
			]]></body>
		</method>


		<method name ="_goToBoard">
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				var boardURL = this.ChaikaThread.getBoardURL(threadURL);
				this.ChaikaCore.browser.openBoard(boardURL, aAddTab);
			]]></body>
		</method>


		<method name ="_write">
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				var postWizardURLSpec = "chrome://chaika/content/post/wizard.xul";
				var threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;
				window.openDialog(postWizardURLSpec, "_blank",
							"chrome, resizable, dialog", threadPlainURL.spec);
			]]></body>
		</method>


		<method name ="_deleteLog">
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				var result = Services.prompt.confirm(null, "ログの削除 [chaika]",
								"このスレッドのログを削除しますか?");
				if(!result) return;

				try{
					var thread = new this.ChaikaThread(threadURL);
					thread.deteleThreadData();
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
				}
			]]></body>
		</method>


		<method name ="_viewChange">
			<parameter name="aOption"/>
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				try{
					var threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;
					threadURL = Services.io.newURI(aOption, null, threadPlainURL);
					this.ChaikaCore.browser.openThread(threadURL, aAddTab, false, false);
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
				}
			]]></body>
		</method>


		<method name ="_viewBrowser">
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				this.ChaikaCore.browser.openThread(threadURL, aAddTab, false, true);
			]]></body>
		</method>


		<method name ="_openAboneManager">
			<body><![CDATA[
				var aboneManagerURL = "chrome://chaika/content/settings/abone-manager.xul";
				window.openDialog(aboneManagerURL, "_blank", "chrome, resizable, toolbar");
			]]></body>
		</method>
	</implementation>

	<handlers>
		<handler event="command" action="this._doCommand(event, false)"/>
		<handler event="click" button="1" action="this._doCommand(event, true)"/>
	</handlers>
</binding>


</bindings>