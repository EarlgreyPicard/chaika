<?xml version="1.0"?>

<bindings id="bbsmenuUpdaterBindings"
		xmlns="http://www.mozilla.org/xbl"
		xmlns:xbl="http://www.mozilla.org/xbl"
		xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<binding id="bbsmenuUpdater">
	<content>
		<xul:hbox flex="1">
			<xul:progressmeter anonid="prgrsMeter" flex="1" style="min-width:50px"/>
			<xul:toolbarbutton anonid="btnCancel" label="X"/>
			<xul:spacer class="small-margin"/>
		</xul:hbox>
	</content>

	<resources>
		<stylesheet src="chrome://chaika/skin/fx-statusbar.css"/>
	</resources>

	<implementation>
		<field name="_bbs2chService"/>
		<field name="_bbsMenuFile"/>
		<field name="_downloader"/>
		<field name="_prgrsMeter"/>
		<property name="bbsMenuFile" onget="return this._bbsMenuFile" readonly="true"/>

		<constructor><![CDATA[
			this._bbs2chService = Components.classes["@mozilla.org/bbs2ch-service;1"]
						.getService(Components.interfaces.nsIBbs2chService);
			this._bbsMenuFile = this._bbs2chService.getDataDir();
			this._bbsMenuFile.appendRelativePath("bbsmenu.html");

			this._downloader = null;
			this._prgrsMeter = document.getAnonymousElementByAttribute(
						this, "anonid", "prgrsMeter");
			this._prgrsMeter.value = 0;
		]]></constructor>

		<destructor>this.cancel()</destructor>


		<method name="_fireEvent">
			<parameter name="aEventType"/>
			<body><![CDATA[
				var event = document.createEvent("Events");
				event.initEvent(aEventType, false, true);

				var noCancel = this.dispatchEvent(event);
				var handler = this.getAttribute("on" + aEventType);
				if(handler){
					var fn = new Function("event", handler);
					var returned = fn(event);
					if (returned == false) noCancel = false;
				}
				return noCancel;
			]]></body>
		</method>

		<method name ="update">
			<body><![CDATA[
				var urlSpec = this._bbs2chService.pref.getCharPref(
								"extensions.chaika.bbsmenu_load_url");
				var filePath = this._bbsMenuFile.path;
				this._downloader = new b2rDownloader(urlSpec, filePath);
				this._downloader._context = this;
				this._downloader.onStart = function(aDownloader){
					var context = this._context;
					context._prgrsMeter.mode = "undetermined";
				};

				this._downloader.onStop = function(aDownloader, aStatus){
					var context = this._context;
					context._prgrsMeter.mode = "determined";
					context._prgrsMeter.value = 0;
					context._downloader = null;
					context._fireEvent("updated");
				};

				this._downloader.onProgressChange = function(aDownloader, aPercentage){
					var context = this._context;
					context._prgrsMeter.mode = "determined";
					context._prgrsMeter.value = aPercentage;
				};
				this._downloader.onError = function(aDownloader, aErrorCode){
					var context = this._context;
					context._prgrsMeter.mode = "determined";
					context._prgrsMeter.value = 0;
					context._fireEvent("upddateerror");
				};
				this._downloader.download();
			]]></body>
		</method>

		<method name ="cancel">
			<body><![CDATA[
				if(this._downloader && this._downloader.loading)
						this._downloader.abort(true);
			]]></body>
		</method>

		<method name ="_doCommand">
			<parameter name="aEvent"/>
			<body><![CDATA[
				var targetElement = aEvent.originalTarget;
				var anonymousID = targetElement.getAttribute("anonid");
				switch(anonymousID){
					case "btnCancel":
						this.cancel();
						break;
				}
			]]></body>
		</method>
	</implementation>

	<handlers>
		<handler event="command" action="this._doCommand(event)"/>
	</handlers>
</binding>


</bindings>