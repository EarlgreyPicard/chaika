<?xml version="1.0"?>

<bindings id="bbsmenuTreeBindings"
		xmlns="http://www.mozilla.org/xbl"
		xmlns:xbl="http://www.mozilla.org/xbl"
		xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="bbsmenuTree" extends="chrome://global/content/bindings/tree.xml#tree">

	<implementation>
		<constructor><![CDATA[
			this._builderObserver = {
			    canDrop: function(aIndex, aOrientation){},
			    onDrop: function(aRow, aOrientation){},
			    onToggleOpenState: function(aIndex){
			    	if(this._timer) clearTimeout(this._timer);
			    	this._timer = setTimeout(function(aTree){
			    		aTree._persistOpenedCategories();
			    	}, 100, this._context);
			    },
			    onCycleHeader: function(aColID, aElement){},
			    onCycleCell: function(aRow, aColID){},
			    onSelectionChanged: function(){},
			    onPerformAction: function(aAction){},
			    onPerformActionOnRow: function(aAction, aRow){},
			    onPerformActionOnCell: function(aAction, aRow, aColID){}
			};
			this._builderObserver._context = this;
		
			this.builder.addObserver(this._builderObserver);

			var clickAction = ChaikaCore.pref.getInt("bbsmenu_click_action");
			if(clickAction == 0){
				this.setAttribute("singleclickmode", "false");
			}else{
				this.setAttribute("singleclickmode", "true");
			}

			var windowMediator = Components.classes["@mozilla.org/appshell/window-mediator;1"]
					.getService(Components.interfaces.nsIWindowMediator);
			var browserWindow = windowMediator.getMostRecentWindow("navigator:browser");
			if(browserWindow && browserWindow.XULBrowserWindow){
				this._XULBrowserWindow = browserWindow.XULBrowserWindow;
			}
		]]></constructor>

		<destructor><![CDATA[
			this.builder.removeObserver(this._builderObserver);
			this.builder._XULBrowserWindow = null;
		]]></destructor>

		<field name="_builderObserver">null</field>
		<field name="_XULBrowserWindow">null</field>
		<field name="_lastMouseOverIndex">null</field>

		<method name="initTree">
			<parameter name="aBbsmenuXMLFile"/>
			<parameter name="aOutSideXMLFile"/>
			<body><![CDATA[
				var ioService = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);
				var bbsMenuXMLURL = ioService.newFileURI(aBbsmenuXMLFile);

				var httpReq = new XMLHttpRequest();
				httpReq.open("GET", bbsMenuXMLURL.spec, false);
				httpReq.send(null);
				var bbsmenuDoc = httpReq.responseXML;
				delete httpReq;

				var outsideXMLURL = ioService.newFileURI(aOutSideXMLFile);
				var httpReq = new XMLHttpRequest();
				httpReq.open("GET", outsideXMLURL.spec, false);
				httpReq.send(null);
				var outsideDoc = httpReq.responseXML;
				delete httpReq;
				var firstNode = bbsmenuDoc.documentElement.firstChild;
				var nodes = outsideDoc.documentElement.childNodes;
				for(var i=0; i<nodes.length; i++){
					var node = nodes[i];
					var newNode = bbsmenuDoc.importNode(node, true);
					bbsmenuDoc.documentElement.insertBefore(newNode, firstNode);
					firstNode = newNode.nextSibling;
				}

				this._bbsmenuDoc = bbsmenuDoc;
				var builder = this.builder;
				builder.datasource = bbsmenuDoc.documentElement;
				builder.rebuild();

				var openedCategories = this.getAttribute("openedCategories");
				if(openedCategories){
					openedCategories = decodeURIComponent(openedCategories).split(",");
					var view = this.view;
					var titleColumn = this.columns.getNamedColumn("bbsmenuTreeCol-title");
					var view = this.view;

					for(var i=0; i<openedCategories.length; i++){
						var rowCount = view.rowCount;
						for(var j=0; j<rowCount; j++){
							var title = view.getCellText(j, titleColumn);
							if(decodeURIComponent(openedCategories[i]) == title){
								view.toggleOpenState(j);
								rowCount = 0;
							}
						}
					}
				}
			]]></body>
		</method>

		<method name="search">
			<parameter name="aSerchStr"/>
			<body><![CDATA[
				if(!this._bbsmenuDoc) return;

				var builder = this.builder;
				if(!aSerchStr){
					builder.datasource = this._bbsmenuDoc.documentElement;
					builder.rebuild();

					var openedCategories = this.getAttribute("openedCategories");
					if(openedCategories){
						openedCategories = decodeURIComponent(openedCategories).split(",");
						var view = this.view;
						var titleColumn = this.columns.getNamedColumn("bbsmenuTreeCol-title");
						var view = this.view;

						for(var i=0; i<openedCategories.length; i++){
							var rowCount = view.rowCount;
							for(var j=0; j<rowCount; j++){
								var title = view.getCellText(j, titleColumn);
								if(decodeURIComponent(openedCategories[i]) == title){
									view.toggleOpenState(j);
									rowCount = 0;
								}
							}
						}
					}

					return;
				}

				function normalize(aStr){
					var unicodeNormalizer = Cc["@mozilla.org/intl/unicodenormalizer;1"]
							.createInstance(Ci.nsIUnicodeNormalizer);
					var normalizedStr = {};
					unicodeNormalizer.NormalizeUnicodeNFKC(aStr, normalizedStr);
					return normalizedStr.value.toLowerCase();
				}

				var searchStr = normalize(aSerchStr);
				var searchDoc = new DOMParser().parseFromString("<bbsmenu/>", "text/xml");
				var firstNode = null;
				var nodes = this._bbsmenuDoc.getElementsByTagName("board");
				for(var i=0; i<nodes.length; i++){
					var node = nodes[i];
					if(normalize(node.getAttribute("title")).indexOf(searchStr) == -1){
						continue;
					}
					var newNode = this._bbsmenuDoc.importNode(node, true);
					searchDoc.documentElement.insertBefore(newNode, firstNode);
					firstNode = newNode.nextSibling;
				}
				
				builder.datasource = searchDoc.documentElement;
				builder.rebuild();
			]]></body>
		</method>


		<method name="openBoard">
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var currentIndex = this.currentIndex;
				if(currentIndex == -1) return;

				var item = this._getItem(currentIndex);

				switch(parseInt(item.type)){
					case ChaikaBoard.BOARD_TYPE_2CH:
					case ChaikaBoard.BOARD_TYPE_BE2CH:
					case ChaikaBoard.BOARD_TYPE_JBBS:
					case ChaikaBoard.BOARD_TYPE_MACHI:
						ChaikaCore.browser.openBoard(item.url, aAddTab);
						break;
					default:
						ChaikaCore.browser.openURL(item.url, aAddTab);
						break;
				}

			]]></body>
		</method>


		<method name="popupshowing">
			<parameter name="aEvent"/>
			<body><![CDATA[
				var view = this.view;
				var currentIndex = this.currentIndex;
				var row = {}
				var obj = {};
				this.treeBoxObject.getCellAt(aEvent.clientX, aEvent.clientY, row, {}, obj);

					// ツリーのアイテム以外をクリック
				if(row.value == -1) return false;
					// セパレータの場合はコンテキストメニューを出さない
				if(view.isSeparator(row.value)) return false;
					// コンテナの場合はコンテキストメニューを出さない
				if(view.isContainer(row.value)) return false;

				var item = this._getItem(currentIndex);

				var contextMenu = document.getElementById(this.getAttribute("context"));
				contextMenu.itemURL = item.urlSpec;
				contextMenu.itemTitle = item.title;

				switch(parseInt(item.type)){
					case ChaikaBoard.BOARD_TYPE_2CH:
					case ChaikaBoard.BOARD_TYPE_BE2CH:
					case ChaikaBoard.BOARD_TYPE_JBBS:
					case ChaikaBoard.BOARD_TYPE_MACHI:
						contextMenu.itemType = "board";
						break;
					default:
						contextMenu.itemType = "page";
						break;
				}

				return true;
			]]></body>
		</method>


		<method name="_getItem">
			<parameter name="aIndex"/>
			<body><![CDATA[
				var view = this.view;
				var titleColumn = this.columns.getNamedColumn("bbsmenuTreeCol-title");
				var typeColumn = this.columns.getNamedColumn("bbsmenuTreeCol-type");
				var ioService = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);

				var item = {};
				item.title = view.getCellText(aIndex, titleColumn);
				item.urlSpec = view.getCellValue(aIndex, titleColumn);
				item.url = ioService.newURI(item.urlSpec, null, null);
				item.type = parseInt(view.getCellValue(aIndex, typeColumn));

				return item;
			]]></body>
		</method>


		<method name="_clickDelay">
			<parameter name="aEvent"/>
			<body><![CDATA[
				this._clickTimer = null;
				var button = aEvent.button;
				var detail = aEvent.detail;

				var openActionPref;
				if(button==0 && detail==1){
						// クリック
					openActionPref = "bbsmenu_click_action";
				}else if(button==0 && detail==2){
						// ダブルクリック
					openActionPref = "bbsmenu_double_click_action";
				}else if(button==1 && detail==1){
						// ミドルクリック
					openActionPref = "bbsmenu_middle_click_action";
				}else{
					return;
				}

				var openAction = ChaikaCore.pref.getInt(openActionPref);
				if(openAction==1){
					this.openBoard(false);
				}else if(openAction==2){
					this.openBoard(true);
				}
			]]></body>
		</method>


		<method name="_closeAllOpendContainers">
			<parameter name="aEvent"/>
			<parameter name="aExceptIndex"/>
			<body><![CDATA[
				var view = this.view;

				if(this.view.getLevel(aExceptIndex) != 0) return;
				if(!this.view.isContainerOpen(aExceptIndex)) return;
				if(!ChaikaCore.pref.getBool("bbsmenu_toggle_open_container")) return;

				var titleColumn = this.columns.getNamedColumn("bbsmenuTreeCol-title");

				var exceptTtitle = view.getCellText(aExceptIndex, titleColumn);
				var closeItemTitles = [];
				for(var i=0; i<view.rowCount; i++){
					if(!(view.isContainer(i) && view.isContainerOpen(i))) continue;
					var title = view.getCellText(i, titleColumn);
					if(exceptTtitle == title) continue;
					closeItemTitles.push(title);
				}
				for(var i=0; i<closeItemTitles.length; i++){
					var rowCount = view.rowCount;
					for(var j=0; j<rowCount; j++){
						var title = view.getCellText(j, titleColumn);
						if(closeItemTitles[i] == title){
							view.toggleOpenState(j);
							rowCount = 0;
						}
					}
				}

					// 閉じないコンテナをクリックした位置までスクロール
				var mouseOverRowIndex = this.boxObject.getRowAt(aEvent.clientX, aEvent.clientY);
				for(var i=0; i<view.rowCount; i++){
					if(!(view.isContainer(i) && view.isContainerOpen(i))) continue;
					var title = view.getCellText(i, titleColumn);
					if(exceptTtitle == title){
						var difference = i - mouseOverRowIndex;
						if(difference > 0) this.boxObject.scrollToRow(difference);
						break;
					}
				}
			]]></body>
		</method>


		<method name="_persistOpenedCategories">
			<body><![CDATA[
				var openedCategories = [];
				var view = this.view;
				var titleColumn = this.columns.getNamedColumn("bbsmenuTreeCol-title");
				for(var i=0; i<view.rowCount; i++){
					if(!(view.isContainer(i) && view.isContainerOpen(i))) continue;
					var title = view.getCellText(i, titleColumn);
					openedCategories.push(encodeURIComponent(title));
				}
				this.setAttribute("openedCategories", openedCategories.join(","));
			]]></body>
		</method>


		<method name="onDragStart">
			<parameter name="aEvent"/>
			<parameter name="aTransferData"/>
			<parameter name="aDragAction"/>
			<body><![CDATA[
				if(aEvent.originalTarget.localName != "treechildren") return;

				var row = {};
				var obj = {};
				this.treeBoxObject.getCellAt(aEvent.clientX, aEvent.clientY, row, {}, obj);

					// ツリーのアイテム以外をドラッグ
				if(row.value == -1) return;
					// コンテナをドラッグ
				if(this.view.isContainer(row.value)) return;

				var item = this._getItem(this.currentIndex);
				aTransferData.data = new TransferData();
				aTransferData.data.addDataForFlavour("text/x-moz-url", item.urlSpec + "\n" + item.title);
				aTransferData.data.addDataForFlavour("text/unicode", item.urlSpec);
			]]></body>
		</method>
	</implementation>


	<handlers>
		<handler event="click"><![CDATA[
			if(event.originalTarget.localName != "treechildren") return;

			var row = {}
			var obj = {};
			this.treeBoxObject.getCellAt(event.clientX, event.clientY, row, {}, obj);
			if(row.value == -1) return;	// ツリーのアイテム以外をクリック


			var button = event.button;
			var detail = event.detail;
			var isSeparator = this.view.isSeparator(row.value);
			var isContainer = this.view.isContainer(row.value);
			if(isSeparator) return;

			if(button==0 && detail==1 && obj.value=="twisty"){
					// twisty ボタンを使ったコンテナのオープン
				this._closeAllOpendContainers(event, row.value);
				return;
			}else if(detail==2 && obj.value!="twisty" && isContainer){
					// ダブルクリックによるコンテナのオープン
				this._closeAllOpendContainers(event, row.value);
				return;
			}else if(detail==1 && obj.value!="twisty" && isContainer){
				this.view.toggleOpenState(row.value);
				this._closeAllOpendContainers(event, row.value);
				return;
			}

			if(isContainer) return;
			if(button>1) return;

			var clickAction = ChaikaCore.pref.getInt("bbsmenu_click_action");
			var doubleClickAction = ChaikaCore.pref.getInt("bbsmenu_double_click_action");

			if(button==1 || doubleClickAction == 0 || clickAction==doubleClickAction){
					// ダブルクリックの動作が指定されていない場合や
					// クリックと同じ動作ならダブルクリック判定を行わない
				this._clickDelay(event);
			}else{
				if(this._clickTimer){
					clearTimeout(this._clickTimer);
				}
				var self = this;
				this._clickTimer = setTimeout(function(aEvent){
					self._clickDelay(aEvent);
				}, 350, event);
			}
		]]></handler>


		<handler event="mousemove"><![CDATA[
			if(!this._XULBrowserWindow) return;
			if(event.originalTarget.localName != "treechildren") return;
			var row = {}
			var obj = {};
			this.treeBoxObject.getCellAt(event.clientX, event.clientY, row, {}, obj);
			if(row.value == -1) return;	// ツリーのアイテム以外
			if(row.value == this._lastMouseOverIndex) return;

			if(this.view.isContainer(row.value) || this.view.isContainer(row.value)){
				this._XULBrowserWindow.setOverLink("", null);
			}else{
				this._XULBrowserWindow.setOverLink(this._getItem(row.value).urlSpec, null);
			}
			this._lastMouseOverIndex = row.value;
		]]></handler>


		<handler event="mouseout"><![CDATA[
			if(!this._XULBrowserWindow) return;
			this._XULBrowserWindow.setOverLink("", null);
		]]></handler>


		<handler event="keydown"><![CDATA[
			if(event.originalTarget != this) return;

			var currentIndex = this.currentIndex;
			if(currentIndex == -1) return;

				// エンターキー以外なら終了
			if(!(event.keyCode==event.DOM_VK_ENTER || event.keyCode==event.DOM_VK_RETURN))
				return;

			if(event.ctrlKey || event.altKey){
				this.openBoard(true);
			}else{
				this.openBoard(false);
			}
		]]></handler>


		<handler event="draggesture"><![CDATA[
			nsDragAndDrop.startDrag(event, this);
		]]></handler>


	</handlers>
</binding>


</bindings>